( Macroprocessor
( =============
( - This is my notes for the macroprocessor
( - Comments begin with '('. There must be a space after. 

( CPU Architecture Diagram
( ========================
( - Stack machine

( +---------+     |||          +-----+
( | DS      |<===>|||          | TOS |<=\
( +---------+     |D|<=====\   +-----+  |
(                 |A|      |      |     |
( +---------+     |T|    __V__  __V__   |
( | RS      |<===>|A|    \    \/    /   |
( +---------+     |||     \  ALU   /    |
(                 |B|      \______/     |
( +---------+     |U|          |        |
( | IO      |<===>|S|<=========*========/
( +---------+     |||
(                 |||     +----+
( +---------+     |||<===>| IP |
( | IR      |<====|||     +----+
( +---------+     |||
(     ||          |||     +-----+
( +---------+     |||====>| MAR |
( | Control |     |||     +-----+
( | Logic   |     |||       ||
( +---------+     |||     +----+
(                 |||<===>| PM |
(                 |||     +----+



















( Fundemental Words
( =================
( - The words defined in this section are written in pure machine code
(   the Macroprocessor and do not rely on any other Forth words.
( - Some instructions are encoded via multiplexors to prevent multiple
(   sources driving the data bus or the ALU. Otherwise, instructions
(   are left unencoded.

(       %---------------- binary number, example: %100 = 4
(       |111------------- bits 16-14 select bus driver, 3-bit encoding
(       |654
(       ||  1111  ------- bits 13-08 activate destination(s), unencoded
(       ||  321098
(       ||  |     7654321 unassigned bits
(       ||  |     |
: NOP  %0000000000000000 ; (  --  )  ( No Operation )
: DS>  %0010000000000000 ; (  -- n ) ( Data Stack output )
: RS>  %0100000000000000 ; (  -- n ) ( Return Stack output )
: IO>  %0110000000000000 ; (  -- n ) ( Input/Output output )
: IP>  %1000000000000000 ; (  -- n ) ( Instruction Pointer outout )
: PM>  %1010000000000000 ; (  -- n ) ( >PM does not exist )
: TOS> %1100000000000000 ; (  -- n ) ( Top Of Stack output )
( :    %1110000000000000 ; (  -- n ) ( un defined )
: >DS  %0001000000000000 ; (  -- n ) ( Data Stack input )
: >RS  %0000100000000000 ; (  -- n ) ( Return Stack input )
: >IR  %0000010000000000 ; (  -- n ) ( IR> does not exist )
: >IP  %0000001000000000 ; (  -- n ) ( Instruction Pointer input )
: >MAR %0000000100000000 ; (  -- n ) ( MR> does not exist )
: >TOS %0000000010000000 ; (  -- n ) ( Top Of Stack input )
: ADD  %0000000000000000 ; (  -- n )  \
: SUB  %0000000000000000 ; (  -- n )  |
: AND  %0000000000000000 ; (  -- n )  |
: OR   %0000000000000000 ; (  -- n )   > ALU instructions
: XOR  %0000000000000000 ; (  -- n )  |
: <<r  %0000000000000000 ; (  -- n )  |
: r>>  %0000000000000000 ; (  -- n )  /


( TODO: Any source that can drive the data bus should be on a driver
(       and that driver connected to a mux to ensure only a single  
(       device drives the data bus at any one time. That may as well
(       be encoded in three bits for seven possible driving source 
(       options plus one NOP.
( TODO: Determine the rules for combining fundemental words. I'm sure
(       there are some that cannot be combined.

( TODO: Encode any ALU operations that are mutually exclusive.



( Combinational Instruction Words
( ===============================
( - These words can be used to combined additional operations with
(   the fundemental words above.
( - example:
(   DS> >TOS +DSI

( TODO: Figure out a way to combine words like DS> and >TOS. Maybe
(       ;; can be placed at the end of a line to OR two items
(       together. This would require each line to provide two
(       elements on the stack. This may or may not be possible, 
(       but the solution will likely become obvious as I continue
(       development.
(       : ;; OR ( n n -- n )

: +ADD ADD OR ( n -- n )
: +SUB SUB OR ( n -- n )
: +DSI DSI OR ( n -- n ) ( Data Stack Incriment )
: +DSD DSD OR ( n -- n ) ( Data Stack Decriment )
: +RSI RSI OR ( n -- n ) ( Return Stack Incriment )
: +RSD RSD OR ( n -- n ) ( Return Stack Decriment )





























( Instruction Representation
( ==========================

( TODO: How often does +IPI get executed? Should +IPI be built into the
(       hardware to happen automatically? Should it be a toggle? Then
(       we must poll, remember, or assert the state; complicated.

(   | DS  | RS  | IO  |  IR===CL  | ALU  | TOS  | IP  |  MAR===PM  |
(   +-----+-----+-----+-----+-----+------+------+-----+------+-----+
( 0 |     |     |     |     |  X  |      |      |     |      |     | +NOP +IPI
(   +-----+-----+-----+-----+-----+------+------+-----+------+-----+
( 1 |     |     |     |     |  X  |      |      | IP> | >MAR |     | IP> >MAR +IPI
(   +-----+-----+-----+-----+-----+------+------+-----+------+-----+
( 2 |     |     |     | >IR |  X  |      |      |     |      | PM> | PM> >IR +IPI
(   +-----+-----+-----+-----+-----+------+------+-----+------+-----+
( 3 |     |     |     |     |  X  |      |      |     |      |     | 
(   +-----+-----+-----+-----+-----+------+------+-----+------+-----+
( 4 |     |     |     |     |  X  |      |      |     |      |     |

( TODO: Find a good wat to represent the state of the machine.
(       Horizontally would be best.





























( RESET
( =====
( - After RESET MAR is set to all zeroes, which will select the first
(   cell of PM.

( Status and Flags
( ================
( - Instead of having a flags register, try to make a design where at
(   the end of each subroutine a status cell is pushed onto the stack.
(   This could simplify the hardware at the expense of software
(   complication.
( - Only some words would need to do this. It whould be obvious to the
(   programmer which words. Perhaps only ALU or conditional words.
( - I can make an RTOS or other small OS. Tasks communicate via
(   the stack.
(   Each task consumes TOS and upon exit, pushes to TOS.


( Interrupts
( ==========
( TODO 


( Other Notes
( ===========
( - Should I include zero register? Would this be done by the ALU?
( - How should the ALU and TOS be configured? See the Canonical Stack
(   Machine and the RTX2000 as examples. Several processors from
(   "Stack Machine" use the same configuration at the RTS2000.
( - In the final book, include a branch diagram for each word in the
(   non-ANS Forth dictionary using graphviz dot.
(   * Both DS> and INC_DS can execute at the same time or individually,
(     one cell or two cells respectively. We can keep them as two
(     separate words or combine them into one hand-coded POP. There
(     is a tradeoff between speed and memory.
(   * Two adjacent singleton branches could ind8icate a possible
(     new word. Maybe we can find some interesting properties.
( - I could potentially make the data register a set of sixteen
(   bidirectional shift registers in parallel. Possibly make them
(   circular/linear selectable.
( - Is it possible to use materials in the semiconductor manufacturing
(   process that will allow each layer to fluress when exposed to a
(   specific frequency of light? This would be great to visual
(   inspection of the device.
( - Add a binary tree word diagra to each word in the dictionary.
(   This can be done using graphviz dot, but text would be better, so
(   the diagram can be in this document. Can I write my definitions such
(   that the reader has the same level of understanding? 



































