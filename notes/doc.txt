


\  __  __                        _____                                        
\ |  \/  |                      |  __ \                                       
\ | \  / | __ _  ___ _ __ ___   | |__) | __ ___   ___ ___  ___ ___  ___  _ __ 
\ | |\/| |/ _` |/ __| '__/ _ \  |  ___/ '__/ _ \ / __/ _ \/ __/ __|/ _ \| '__|
\ | |  | | (_| | (__| | | (_) | | |   | | | (_) | (_|  __/\__ \__ \ (_) | |   
\ |_|  |_|\__,_|\___|_|  \___/  |_|   |_|  \___/ \___\___||___/___/\___/|_|   
\
\                                                          version: 2023-02-16
\         by Charles Edward Pax











\                         +-----+     |||====\\    //=====\\
\                         | IO  |<===>|||    ||    ||     ||
\                         +-----+     | |  __\/_  _\/__   ||
\                                     |D|  \ A  \/  B /   ||
\                         +-----+     |A|   \  ALU   /    ||
\                         | PC  |<===>|T|    \______/     ||
\                         +-----+     |A|       ||        ||
\                                     | |     +------+    ||
\                                     |B|<====| TOS  |====//
\                         +-----+     |U|     +------+
\                         | PM  |<===>|S|<===>| DS1  |
\                         +-----+     | |     +------+
\                            ||       |||<===>| DS2  |
\                         +-----+     |||     +------+
\                         | MAR |<====|||     +------+
\                         +-----+     |||     + DS31 +
\                                     |||     +------+
\                         +-----+     |||
\                         | IR  |<===>|||     +------+
\                         +-----+     |||<====| RS   |
\                         | CL  |     |||     +------+
\                         +-----+     |||     +------+
\                                             | RS31 |
\                                             +------+
















\ <line 64>  MacroProcessor v2023-02-16                                          <page 1>
\ FRONT MATTER --------------------------------------------------------------------------

\ TODO: 
\   Introduction
\   Hardware diagram (simple)
\   Hardware Overview (simple)
\   Module Overview
\   Hardware Diagram Detailed
\   Module detailed description
\   Arithmetic Logic Unit
\   Step Counter
\   Base Words
\   ISA Table
\   Combinational Words (single instruction)

\ Line #    Section
\ ------    ---------------------------------
\     65    FRONT MATTER
\    129    INTRODUCTION
\    143    -- Basic conventions
\    193    ARCHITECTUAL OVERVIEW

\           List of figures
\           ---------------------------------
\    222    Figure abd: Architecture block diagram






































\ <line 128>  MacroProcessor v2023-02-16  FRONT MATTER                           <page 2>
\ INTRODUCTION --------------------------------------------------------------------------

\ The MacroProcessor is a microprocessor with an unconventional design goal: 
\ understandability. An individual human should be able to visually observe the 
\ integrated circuit (IC) with an optical microscope and verify the layout and function 
\ of the circuit.

\ This document is intended to be both documentation of the system and the software 
\ supporting the system. If you have the documentation, you have the code.

\ This processor is designed to run Forth. It may run other languages with a bit of 
\ effort, but none will be made here.


\ -- Basic conventions ------------------------------------------------------------------

\ This document follows several basic conventions that you should know to get started.
\ Further discussion of conventions appear the section CONVENTIONS.

\ Lines beginning with the slash character (\) are comments and are ignored by a Forth 
\ interperter. Additionally, empty lines are not processed by Forth. All other lines 
\ will be interperted by the Forth interperter.

\ You may have a better experience if you view this document with line numbers.

\ Each page is sixty-four lines tall and ninety characters wide. See SCRIPTS for a bash 
\ script to automate printing with line numbers.

 <-----------------------------  you need this much width  ----------------------------->


\ -- Forth Programming Language ---------------------------------------------------------

\ MacroProcessor is design specifically to run the programming language knows as Forth.
\ You will learn a bit of Forth as you read this document.

\ Consider the Forth definition below.

\     : @  ( addr -- n1 )  ( Fetch the value at location addr in PM as n1 )
              ALU> ,>MAR ,ALU_TOS
              PM> ,>ALU ,ALU_TOS

\ The word ':' ("colon") tells the Forth interpreter to compile the following words
\ rather than interpreting them. In interpretation mode, Forth will execute each word
\ from left to right. Compilation mode instructs Forth to a compile the words and save
\ them to a target destination. The default is to add the new word to the dictionary,
\ but the compiled code can also be saved elsewhere.

\ The word '@' is chosen by the programmer. In standard Forth the '@' word is used to
\ get a value stored at a memory address and place it on top of the stack. The
\ programmer would shoose 'SAVE' or any other word, but we will stick with convention.

\ The '(' word marks the beginning of a comment and all following words will be
\ ignored until the following ')', which will put the interpreter back into execution
\ mode.

\ Inside '(' and ')' we have a description of the Forth data stack before and after
\ execution of the word ( e.g. before -- after ). In this case, addr is the address at
\ which n1 will be retreived when this word is executed. After execution, the number
\ n1 will be on the stack.

\ There is also a second comment in long form describing the function of this word.

\ <line 192>  MacroProcessor v2023-02-16  INTRODUCTION                           <page 3>
\ ---------------------------------------------------------------------------------------






























































\ <line 256 >  MacroProcessor v2023-02-16                                        <page 4>
\ ARCHITECTUAL OVERVIEW -----------------------------------------------------------------

\ The overall design of the Central Processin Unit (CPU) is based on the
\ "canonical stack machine" as described in "Stack Machines: The New Wave"
\ by Philip Koopman.


\ -- Figure abds: Architecture block diagram (simplified) -------------------------------
\
\                         +-----+     |||====\\    //=====\\
\                         | IO  |<===>|||    ||    ||     ||
\                         +-----+     | |  __\/_  _\/__   ||
\                                     |D|  \ A  \/  B /   ||
\                         +-----+     |A|   \  ALU   /    ||
\                         | PC  |<===>|T|    \______/     ||
\                         +-----+     |A|       ||        ||
\                                     | |     +------+    ||
\                                     |B|<====| TOS  |====//
\                         +-----+     |U|     +------+
\                         | PM  |<===>|S|<===>| DS1  |
\                         +-----+     | |     +------+
\                            ||       |||<===>| DS2  |
\                         +-----+     |||     +------+
\                         | MAR |<====|||     +------+
\                         +-----+     |||     + DS31 +
\                                     |||     +------+
\                         +-----+     |||
\                         | IR  |<===>|||     +------+
\                         +-----+     |||<====| RS   |
\                         | CL  |     |||     +------+
\                         +-----+     |||     +------+
\                                             | RS31 |
\                                             +------+
\
\ ---------------------------------------------------------------------------------------


\ The CPU contains the following items.

\ DS - Data Stack                 TOS - Top of Stack
\ RS - Return Stack               ALU - Arithmetic Logic Unit
\ IO - Input/Output               PC - Program Counter
\ IR - Instructions Register      MAR - Memory Access Register
\ CL - Control Logic              PM - Program Memory

\ Modules DS, RS, IO, PC, and PM are able to accept input from the data bus or output to 
\ the data bus, as indicated by the double arrows '<===>'. Multiplexors ensure only one 
\ module may output a signal to the data bus and only one module may input a signal from 
 \the data bus.

\ Modules IR and MAR are able to accept input from the data bus, but are not able to 
\ output their contents to the data bus.

\ ALU always accepts input from TOS via input B and is able to accept input from the
\ data bus via input A. ALU is can output to either TOS or the data bus.

\ TOS always outputs to ALU input B. TOS always accepts input from ALU. TOS can 
\ recieve data from the data bus by passing the signal through ALU.

\ TODO: Write a section about stacks



\ <line 320>  MacroProcessor v2023-02-16  ARCHITECTUAL OVERVIEW                  <page 5>
\ ---------------------------------------------------------------------------------------

\ -- Figure abd: Architecture block diagram ---------------------------------------------
\
\                                       |||=====================\\        //=====\\
\                                       |||  ALU_ADD  ALU_SUB   ||        ||     ||
\  +-------------------+           IO>  |||  ALU_AND  ALU_OR    ||        ||     ||
\  |   Input/          |             |  |||  ALU_XOR  ALU_>>    ||        ||     ||
\  |   Output          |=============#=>|||  ALU_<<          ___\/___  ___\/___  ||
\  |                   |================| |  TOS++           \   A   \/   B   /  ||
\  |                   |-- >IO          | |  TOS--            \              /   ||
\  +-------------------+                |1|           ALU_OP --\    ALU     /    ||
\                                       |6|                     \__________/     ||
\                                       | |                          ||          ||
\  +-------------------+           PC>  |B|                          ||          ||
\  |   Program         |             |  |I|  TOS>          +---------\/-----+    ||
\  |   Counter         |=============#=>|T|  |             |   Top Of       |    ||
\  |                   |================| |<=#=============|   Stack        |    ||
\  |                   |-- >PC          |D|================|                |====//
\  |                   |-- PC++         |A|         >TOS --|   (cell 0)     |
\  +-------------------+                |T|  DS1>          +----------------+
\                                       |A|  |             |   Data         |
\                                  PM>  | |<=#=============|   Stack        |
\  +-------------------+             |  |B|================|   Cell 1       |
\  |   Program         |=============#=>|U|         >DS1 --|                |
\  |   Memory          |================|S|  DS2>          +----------------+
\  |                   |-- >PM          | |  |             |   Data         |
\  +-------------------+                | |<=#=============|   Stack        |
\  |   Memory          |================|||================|   Cell 2       |
\  |   Access Reg.     |-- >MAR         |||         >DS2 --|                |
\  +-------------------+                |||                +----------------+
\                                       |||                |   DS3          |
\                                       |||                +----------------+
\  +-------------------+                |||                .                .
\  |   Instruction     |================|||                +----------------+
\  |   Register        |-- >IR          |||                |   DS31         |
\  +-------------------+                |||                +----------------+
\  |   Control Logic   |                |||
\  |                   |                |||
\  | Instruction Cycle |                |||  RS>           +----------------+
\  | ----------------- |                |||  |             |   Return       |
\  | 00 PC> ,>MAR      |                |||<=#=============|   Stack        |
\  | 01 PM> ,>IR ,PC++ |                |||================|                |
\  | 10 PC> ,>MAR      |                |||          >RS --|                |
\  | 11 CL = IR[]      |                |||                +----------------+
\  |                   |                |||                .                .
\  +-------------------+                |||                +----------------+
\                                       |||                |   RS31         |
\                                                          +----------------+
\
\ ---------------------------------------------------------------------------------------

\ pushing to TOS shifts down everything.
\ pushing to DS1 shifts down everything below DS1 leaving TOS unmodified
\ pushing to DS2 shifts down everything below DS2 leaving TOS and DS1 unmodified
\ anything that can drive the data bus is multiplexed; only one output possible concurrently
\ ALU input B is physically connected to the TOS register. Always connected.
\ The ALU is always connected to TOS through a driver circuit. The value of TOS only
\ changes when >TOS is HIGH.
\ TODO: add symbols for the multiplexor to the large diagram. More detailed.



\ <line 384 >  MacroProcessor v2023-02-16                                        <page 6>
\ MODULE OVERVIEW -----------------------------------------------------------------------

\ -- Data Stack -------------------------------------------------------------------------

\       >DS ( DS intput enable )
\       DS> ( DS output enable )
\       DS++ ( increment DS )
\       DS-- ( decriment DS )

\ -- Return Stack -----------------------------------------------------------------------

\       >RS ( RS input enable )
\       RS> ( RS output enable )
\       RS++ ( increment RS )
\       RS-- ( decriment RS )

\ -- Instruction Register ---------------------------------------------------------------

\       >IR ( IR input enable )

\ -- Control Logic ----------------------------------------------------------------------

\ -- Program Counter --------------------------------------------------------------------
\       >PC ( PC input enable )
\       PC> ( PC output enable )
\       PC++ ( increment PC )

\ -- Arithmetic Logic Unit --------------------------------------------------------------

\ When ~>>ALU (ALU_OP = 0), ALU input A = 0x0

\ "ALU> ,ALU_AND" will always output zero to the bus
\ "ALU_AND" makes TOS zero






























\ <line 448>  MacroProcessor v2023-02-16  MODULE OVERVIEW                        <page 7>
\ INSTRUCTION SET ARCHITECTURE (ISA) ----------------------------------------------------

\ The Instruction Set Architecture for the MacroProcessor is quite simple.



\ -- Instruction Format -----------------------------------------------------------------

\ The macroProcessor has a single instruction format. Instructions are 16-bit. Fixed
\ layout. Bits 15-12 select the source module. Bits 11-08 select the destination module.
\ Bits 7-4 select which ALU operatoin to use. Bits 3-1 select which module to increment.
\ Bit 0 is reserved.



\ -- Figure inf: Instruction format -----------------------------------------------------
\
\    xxxx             Bits 15-12 - source enable
\        xxxx         Bits 11-08 - Destination enable
\            xxxx     Bits 7-4   - ALU operation select
\                xxxx Bits 3-0   - ALU flags
\
\ ---------------------------------------------------------------------------------------


\ See Figure sd below for which modules are selectable as source or destination. The
\ Memory Access Register (MAR) and Instruction Register (IR) are not selectable as
\ sources. This simplifies the circuitry as these are not necessary as sources.

\ -- Figure sd: Source and destination selection ----------------------------------------
\
\    Source  Destination  Module
\    ------  -----------  ----------------------------
\      X         X        Data Stack (DS)
\      X         X        Return Stack (RS)
\      X         X        Program Counter (PC)
\      -         X        Memory Access Register (MAR)
\      X         X        Program Memory (PM)
\      X         X        Arithmetic Logic Unit (ALU)
\      -         X        Instruction Register (IR)
\      X         X        Input/Output (IO)
\
\ ---------------------------------------------------------------------------------------

\ TODO: Discuss other bit fields here


















\ <line 512>  MacroProcessor v2023-02-16  MODULE OVERVIEW                        <page 8>
\ <word>   <binary op code >     <stack >   <op code description>
: NOP      %0000000000000000  ;  (  --  )  ( No Operation )
: RESET    %1111111111111111  ;  (  --  )  ( Reser system )
\          %0000------------  ;  (  --  )  ( See NOP. Bits 15-12 - Source enable )
: DS1>     %0001000000000000  ;  (  --  )  ( Data Stack output )
: RS>      %0010000000000000  ;  (  --  )  ( Return Stack output )
: PC>      %0011000000000000  ;  (  --  )  ( Program Counter outout )
: PM>      %0100000000000000  ;  (  --  )  ( Program Memory output )
: IO>      %0101000000000000  ;  (  --  )  ( Input/Output output )
\          %0110------------  ;  (  --  )  (  )
: TOS>     %0111000000000000  ;  (  --  )  ( TOS output. Same as DS0> )
\          %1000------------  ;  (  --  )  (  )
\          %1001------------  ;  (  --  )  (  )
\ DS2>     %1010------------  ;  (  --  )  (  )
\          %1011------------  ;  (  --  )  (  )
\          %1100------------  ;  (  --  )  (  )
\          %1101------------  ;  (  --  )  (  )
\          %1110------------  ;  (  --  )  ( See RESET )
\          %1111------------  ;  (  --  )  ( reserved )
\          %----0000--------  ;  (  --  )  ( See NOP. Bits 11-08 - Destination enable )
: >DS      %0000000100000000  ;  (  --  )  ( into Data Stack )
: >RS      %0000001000000000  ;  (  --  )  ( into Return Stack )
: >PC      %0000001100000000  ;  (  --  )  ( into Program Counter )
: >PM      %0000010000000000  ;  (  --  )  ( into Program Memory )
: >IO      %0000010100000000  ;  (  --  )  ( into Input/Output )
\          %----0110--------  ;  (  --  )  (  )
: >TOS     %0000011100000000  ;  (  --  )  ( into TOS )
: >MAR     %0000100000000000  ;  (  --  )  ( into Memory Access Register )
: >IR      %0000100100000000  ;  (  --  )  ( into Instruction Register )
\ >DS2     %----1010--------  ;  (  --  )  (  )
\          %----1011--------  ;  (  --  )  (  )
\          %----1100--------  ;  (  --  )  (  )
\          %----1101--------  ;  (  --  )  (  )
\          %----1110--------  ;  (  --  )  (  )
\          %----1111--------  ;  (  --  )  ( See RESET )
\          %--------0000----  ;  (  --  )  ( See NOP. Bits 7-4 - ALU operation select )
: ALU_ADD  %0000000000010000  ;  (  --  )  ( ALU ADD enable )
: ALU_SUB  %0000000000100000  ;  (  --  )  ( ALU SUB enable ) \ necessary? 2s compliment
: ALU_AND  %0000000000110000  ;  (  --  )  ( ALU AND enable )
: ALU_OR   %0000000001000000  ;  (  --  )  ( ALU OR enable )
: ALU_XOR  %0000000001010000  ;  (  --  )  ( ALU XOR enable )
: ALU_<<   %0000000001100000  ;  (  --  )  (  )
: ALU_>>   %0000000001110000  ;  (  --  )  (  )
\          %0000000010000000  ;  (  --  )  (  )
\          %--------1001----  ;  (  --  )  (  )
\          %--------1010----  ;  (  --  )  (  )
\          %--------1011----  ;  (  --  )  (  )
\          %--------1101----  ;  (  --  )  (  )
\          %--------1110----  ;  (  --  )  ( See RESET )
\          %--------1111----  ;  (  --  )  ( reserved )
\          %------------0000  ;  (  --  )  ( See NOP. Bits 3-0 - Conditional branching/flags)
: if=0     %------------0001  ;  (  --  )  ( Zero )
: if<0     %------------0010  ;  (  --  )  ( Sign )
: if_C     %------------0100  ;  (  --  )  ( Carry )
: if_OF    %------------1000  ;  (  --  )  ( Overflow )
\          %------------1111  ;  (  --  )  ( See RESET )
\
\ -- Figure isa: Instruction Set Architecture -------------------------------------------





\ <line 576>  MacroProcessor v2023-02-16  INSTRUCTION SET ARCHICETURE            <page 9>
\ ---------------------------------------------------------------------------------------

\ TODO: Discuss how to combine DS> >RS using OR logic. Create a need for a better 
\       notation.

\ TODO: Note to the reader that DS> and ,DS> are quite different. Mention it here and
\       then cover it again later. The code  ,>DS  easily could have been  >DS_OR  .
























































\ <line 640 >  MacroProcessor v2023-02-16                                       <page 10>
\ COMBINATIONAL INSTRUCTION WORDS -------------------------------------------------------

\ Given the nature of the instruction format, the base control words can be combined into
\ instructions by using a bitwise OR operations.

\ We will define another set of words identical to the list of control words, but with
\ the addition of a bitwise OR operation.

\ -- Figure orw: OR words ---------------------------------------------------------------

: ,NOP  NOP  OR ;         (  --  ) ( OR with NOP )
: ,DS>  DS>  OR ;         (  --  ) ( OR with Data Stack output )
: ,RS>  RS>  OR ;         (  --  ) ( OR with Return Stack output )
: ,PC>  PC>  OR ;         (  --  ) ( OR with Program Counter outout )
: ,PM>  PM>  OR ;         (  --  ) ( OR with Program Memory output )
: ,IO>  IO>  OR ;         (  --  ) ( OR with Input/Output output )
: ,ALU> ALU> OR ;         (  --  ) ( OR with ALU )
: ,>DS  >DS  OR ;         (  --  ) ( OR with into Data Stack )
: ,>RS  >RS  OR ;         (  --  ) ( OR with into Return Stack )
: ,>PC  >PC  OR ;         (  --  ) ( OR with into Program Counter )
: ,>PM  >PM  OR ;         (  --  ) ( OR with into Program Memory )
: ,>IO  >IO  OR ;         (  --  ) ( OR with into Input/Output )
: ,>TOS >TOS OR ;         (  --  ) ( OR with into Top Of Stack )
: ,>ALU >ALU OR ;         (  --  ) ( OR with into Arithmetic Logic Unit )
: ,>MAR >MAR OR ;         (  --  ) ( OR with into Memory Access Register )
: ,>IR  >IR  OR ;         (  --  ) ( OR with into Instruction Register )
: ,ALU_ADD  ALU_ADD  OR ; (  --  ) ( OR with ALU ADD enable )
: ,ALU_SUB  ALU_SUB  OR ; (  --  ) ( OR with ALU SUB enable )
: ,ALU_AND  ALU_AND  OR ; (  --  ) ( OR with ALU AND enable )
: ,ALU_OR   ALU_OR   OR ; (  --  ) ( OR with ALU OR enable )
: ,ALU_XOR  ALU_XOR  OR ; (  --  ) ( OR with ALU XOR enable )
; ,ALU_TOS  ALU_TOS OR ;  (  --  ) ( OR with TOS passthrough )
: ,DS++ DS++   OR ;       (  --  ) ( OR with increment RS )
: ,DS-- DS--   OR ;       (  --  ) ( OR with decremetn RS )
: ,RS++ RS++   OR ;       (  --  ) ( OR with increment RS )
: ,RS-- RS--   OR ;       (  --  ) ( OR with decremetn RS )

\ ---------------------------------------------------------------------------------------

\ TODO: Discuss OR logic here
\ Instructions are created by doing a bitwise OR of multiple words from the definitions below.






















\ <line 704 >  MacroProcessor v2023-02-16                                       <page 11>
\ ---------------------------------------------------------------------------------------

\ This notation results in clear instructions without requiring
\ an assembler. Take, for example, copying the contents of PC into
\ RS and incrimenting RS.

\              PC> ,>RS ,RS++  

\ Step 1. PC> places onto the stack  %0011000000000000

\ Step 2. ,>RS places onto the stack %0000001000000000 
\         and performs a bitwise OR,
\         leaving onto the stack     %0011001000000000

\ Step 3. ,RS+ places onto the stack %0000000000000001
\         and performs a bitwise OR,
\         leaving on the stack       %0011001000000001

\ TODO: expand on this

\ Not every combination makes sense even though it is possible. For example PC> ,>RS ,ADD 
\ will copy the contents of PS to RS and will enable the ALU ADD function, but nothing 
\ will be added because the ALU is not active.

\ Make an exercise where the ,ALU_AND and ,ALU_<< are used together. Instead, it 
\ becomes ALU_>> due to the bitwise OR. It is possible to combine instructions,
\ but not all of them make sense or have expected behavior. This is a good reason
\ to not play with the low level words and instead, use the higher level words.
\ Use PUSH and POP rather than the individual instructions.

\ Any word that can be expressed in a single instruction, should be. Do so even if the 
\ word can be expressed using other Forth words. Not always good, but good for here.































\ <line 768 >  MacroProcessor v2023-02-16                                       <page 12>
\ INSTRUCTION CYCLE ---------------------------------------------------------------------

\ The CPU has a four step instruction cycle. The first three steps prepare the CPU for
\ executing the main instruction while the fourth step is the actual user-defined
\ instruction loaded into the Instruction Register (IR).


\ -- Microinstructions-------------------------------------------------------------------


\ ---------------------------------------------------------------------------------------
\ Step  Instruction
\ ----  -----------
\  00   PC> ,>MAR
\  01   PM> ,>IR ,PC++
\  10   PC> ,>MAR
\  11   Control Logic = IR[ <instruction> ]
\
\ -- Figure sc: Step cycle --------------------------------------------------------------

\ TODO: LSB indicates if this is a memory operation
\       0 - Reset the count
\       1 - Read the next cell to destination


\ TODO: TODO: include ALU flag affects?
\ TODO: Write a section that describes the instruction cycle




































\ <line 832 >  MacroProcessor v2023-02-16                                       <page 13>
\ -- Instruction Timing -----------------------------------------------------------------
\ Instructions are executed. The control logic is configured in between each step.


\ -- Figure timing: Timing chart --------------------------------------------------------
\
\         _______________________________________________________________________________
\ RESET _/       

\            _______         _______         _______         _______         _______     
\  CLK  ____/       \_______/       \_______/       \_______/       \_______/       \____

\       ... | Execute 00    | Execute 01    | Execute 10    | Execute 11   |
\           |  PC> ,>MAR    | PM> ,>IR ,PC++| PC> ,>MAR     | CL=IR[]      | ...
\       ____         _______         _______         _______         _______         ____
\ ~CLK      \_______/       \_______/       \_______/       \_______/       \_______/    
\
\   ... Setup 00    | Setup 01      | Setup 10      | Setup 11      | ...
\       PC> ,>MAR   | PM> ,>IR ,PC++| PC> ,>MAR     | CL=IR[]       |
\
\ ---------------------------------------------------------------------------------------

\ TODO: Write an explaination of the instrucion cycle timing chart








































\ <line 896 >  MacroProcessor v2023-02-16                                       <page 14>
\ STATUS AND FLAGS ----------------------------------------------------------------------

\ - Instead of having a flags register, try to make a design where at
\   the end of each subroutine a status cell is pushed onto the stack.
\   This could simplify the hardware at the expense of software
\   complication.
\ - Only some words would need to do this. It whould be obvious to the
\   programmer which words. Perhaps only ALU or conditional words.
\ - I can make an RTOS or other small OS. Tasks communicate via
\   the stack.
\   Each task consumes TOS and upon exit, pushes to TOS.





















\ INTERRUPTS ----------------------------------------------------------------------------






























\ <line 960 >  MacroProcessor v2023-02-16                                       <page 15>































































\ <line 1024>  MacroProcessor v2023-02-16  OTHER NOTES                          <page 16>
\ HARDWARE DIAGRAM ----------------------------------------------------------------------






























































\ <line 1088>  MacroProcessor v2023-02-16  HARDWARE DIAGRAM                     <page 17>
\ ---------------------------------------------------------------------------------------






























































\ <line 1152>  MacroProcessor v2023-02-16  DICTIONARY DEFINITIONS               <page 18>
\ SCRIPTS -------------------------------------------------------------------------------

\ -- print.sh ---------------------------------------------------------------------------

\ #!/bin/bash

\ # Bash script to print a plain text file 64 lines per page.

\ if [ $# -eq 0 ]; then                         # check if an argument was passed
\   echo "Error: No argument provided"
\   exit 1
\ fi

\ file=$1                                       # store the argument as a variable
\ lines=64                                      # set the default number of lines to 20

\ if [ $# -eq 2 ]; then                         # check if a second argument was passed
\   lines=$2
\ fi

\ if [ ! -f "$file" ]; then                     # check if the argument is a file
\   echo "Error: First argument is not a file"
\   exit 1
\ fi

\ nl -b a $file > $file.numbered                # add line numbers to the file

\ split -l $lines $file.numbered -d -a 4 print_ # split the file into groups of the
\ for i in print_*; do                          # specified number of lines and print
\  lp -o cpi=16 -o lpi=7 \                      # each group
\  -o page-bottom=70 -o page-left=50 \
\  -o page-right=60 -o page-top=60 $i
\ done

\ rm print_*                                    # delete the temporary files
\ rm $file.numbered
\ exit 0                                        # exit the script with a success status code


\ -- frontmatter.sh ---------------------------------------------------------------------
\ TODO: write a script to generate table of contents
\ TODO: write a script to generate a lis of figures/ tables
\ TODO: write a script to generate the page footer




















\ <line 1216>  MacroProcessor v2023-02-16  SCRIPTS                              <page 19>
\ DOCUMENT CONVENTIONS ------------------------------------------------------------------

\ - Sections are in all caps with a horizontal rule
\ - Subsections are capitalized normally with a horizontal rule
\ - Each section or subsection is preceeded by two empty lines and proceeded by one.
\ - Each section begins on a new page
\ - Each table/figure is preceeded and followed by two empty lines
\ - The label and description for each figure appears below the figure
\ - Two spaces before and after inline code
\ - 





















































\ <line 1280>  MacroProcessor v2023-02-16                                       <page 20>
\ ---------------------------------------------------------------------------------------






























































\ <line 1344>  MacroProcessor v2023-02-16                                       <page 21>
\ DICTIONARY ----------------------------------------------------------------------------

: !  ( n1 addr --  ) ( Store n1 at location addr in PM )
        ALU> ,>MAR ,ALU_TOS
        DS> ,>PM
        DS> ,>TOS

: @  ( addr -- n1 )  ( Fetch the value at location addr in PM as n1 )
        ALU> ,>MAR ,ALU_TOS
        PM> ,>ALU ,ALU_TOS

: +  ( n1 n2 -- n3 )  ( Add n1 and n2, giving n3 )
        DS> ,>ALU ,DS-- ,ALU_ADD

: -      ( n1 n2 -- n3 )  ( Subtract n2 rom n1, giving n3 )
        DS> ,>ALU ,DS-- ,ALU_SUB

: AND    ( n1 n2 -- n3 )  ( Perform a bitwise AND on n1 and n2, giving n3 )
        DS> ,>ALU ,DS-- ,ALU_AND

: OR     ( n1 n2 -- n3 )  ( Perform a bitwise OR on n1 and n2, giving n3 )
        DS> ,>ALU ,DS-- ,ALU_OR

: XOR    ( n1 n2 -- n3 )  ( Perform a bitwise XOR on n1 and n2, giving n3 )
        DS> ,>ALU ,DS-- ,ALU_XOR

: >R  ( n1 --  )  ( Push n1 on to the return stack )
        ALU> ,>RS ,ALU_TOS ,DS--
        DS> ,>ALU ,ALU_TOS

: R>  (  -- n1 )  ( Pop RS, push to TOS )
        ALU> ,>DS ,DS++ ,ALU_TOS
        RS> ,>ALU ,ALU_TOS ,RS--

: DUP  ( n1 -- n1 n1 )  ( Duplicate n1 to TOS )
        ALU> ,>DS ,DS++ ,ALU_TOS

: DROP  ( n1 --  )  ( Drop n1 from the stack )
        DS> ,>ALU ,ALU_TOS ,DS--

: OVER  ( n1 n2 -- n1 n2 n1 )  ( Duplicate the second stack element to TOS )

: SWAP  ( n1 n2 -- n2 n1 )  ( Swap the order of the top two elements )
        ALU> ,>RS ,RS++ ,ALU_TOS
        DS> ,>ALU ,ALU_TOS
        RS> ,>DS ,RS--

: [IF]  ( n1 --  )  ( If n1 == 0, branch to address in next cell )



: [CALL]  (  --  )  ( Perform a subroutine call to address in next cell )



: [EXIT]  (  --  )  ( Perform a subroutine return )
       


: [LIT]  (  -- n1 )  ( Push the value in the next cell to DS )



\ <line 1408>  MacroProcessor v2023-02-16  DICTIONARY                           <page 22>
\ -- OTHER NOTES ------------------------------------------------------------------------

\ - Should I include zero register? Would this be done by the ALU?
\ - How should the ALU and TOS be configured? See the Canonical Stack
\   Machine and the RTX2000 as examples. Several processors from
\   "Stack Machine" use the same configuration at the RTS2000.
\ - In the final book, include a branch diagram for each word in the
\   non-ANS Forth dictionary using graphviz dot.
\   * Both DS> and INC_DS can execute at the same time or individually,
\     one cell or two cells respectively. We can keep them as two
\     separate words or combine them into one hand-coded POP. There
\     is a tradeoff between speed and memory.
\   * Two adjacent singleton branches could ind8icate a possible
\     new word. Maybe we can find some interesting properties.
\ - I could potentially make the data register a set of sixteen
\   bidirectional shift registers in parallel. Possibly make them
\   circular/linear selectable.
\ - Is it possible to use materials in the semiconductor manufacturing
\   process that will allow each layer to fluress when exposed to a
\   specific frequency of light? This would be great to visual
\   inspection of the device.
\ - Add a binary tree word diagram to each word in the dictionary.
\   This can be done using graphviz dot, but text would be better, so
\   the diagram can be in this document. Can I write my definitions such
\   that the reader has the same level of understanding? 
\ - How do I deal with ALU flags/status?
\ - Is anything memory-mapped?
\ - See Forth v6 at mosaic-industries.com
\ - The memory has two bytes per cell. Use address bits 14-0 as
\   memory bits 15-1, with bit zero = 0. Use address bit 15 to switch
\   to another memory unit or control structure.
\ - How does CALL, RETURN, EXIT, etc. work?
\ - How does a memory unit work?
\ - Memory Map
\     - address bit 0 is always 0
\ - Look into JonesForth
\ - "Look at "the bitcoin bitfield (interpreter.h, line 43) in ROM chip"
\ - Look at xxd for text to binary
\ - SmithForth, a very nice layout for simple Forth interpreter. See
\   "SmithForth Workings" on youtube
\ - See retroforth.org, camelforth, collapse OS, midrocore on github (forth2020,
\   MicroForth
\ -  Read "Moving Forth" by Brad Rodriguez
\ - See github.com/miniforth. Fits on a boot sector
\ TODO: Add a section describing the ALU
\       ALU_ADD ALU_OR ALU_XOR ALU_ROTATE ALU_COMPARE ALU_COMPLEMENT
\       FLAGS: A-B=0, ZERO=1
\       A-B<0, NEGATIVE=1
\       ALU overflow bit, OVERFLOW=1
\ ALU OP codes to add (these have flags)
\ -------------------
\ ADD^ add
\ ADC^ add with carry
\ CMP^ compare
\ SBB^ subtract with borrow

\ The CPU should have flags for instructions. Forth will have
\ flags placed on the stack.
\ - If this were a textbook, I would want to jump up or down through the layers of
\   abstraction through stories, interesting facts, pictures, and practical examples.



\ <line 1472>  MacroProcessor v2023-02-16  OTHER NOTES                          <page 23>
\ ---------------------------------------------------------------------------------------






























































\ <line 1536>  MacroProcessor v2023-02-16                                       <page 24>
\ RESET sets PC to 0x00. Also sets the instruction step counter to step 000. Step 001 
\ puts 0x00 into MAR.

\ Can I hold down a button to set PC to a balue other than zero? If so, the system can 
\ take its first instruction from an address other than 0x00.

\ Maybe this is related to instruction 0xFF beingh reserved.

\ If source and destination are both %1111, the system loads the remaining  bits into PD.
\ Software is always able to send a software reset via PM> ,>IR. What is so special then?

\ In Control Logic there can be a test for 0xFF, which is the bitwise inverse of 
\ 0x00 (NOP). Use a sixteen-bit AND gate to control something. Maybe RESSET. Maybe 
\ something to do with interrupts.

\ 0xFF is what RESET puts into PC when One holds down the reset button (pulled high).

\ Design the IC to have contacts for zebra pads. Connect to a LCD that has the 
\ layout of the CPU on it. This would be a custom LCD with cells to represent components
\ in the CPU, modules. Using a microscope you can see how the contacts connect to
\ modules in the system. You can visually verify the LCD cells. It would be cool to
\ watch your computer run this way. Maybe there is a better way to connect things.



